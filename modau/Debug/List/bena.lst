
AVRASM ver. 2.1.30  C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm Sun Oct 02 13:45:39 2022

C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1092): warning: Register r7 already defined by the .DEF directive
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1093): warning: Register r6 already defined by the .DEF directive
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1094): warning: Register r8 already defined by the .DEF directive
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1095): warning: Register r9 already defined by the .DEF directive
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1096): warning: Register r10 already defined by the .DEF directive
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1097): warning: Register r11 already defined by the .DEF directive
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1098): warning: Register r12 already defined by the .DEF directive
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1099): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _dl=R5
                 	.DEF _dr=R4
                 	.DEF _du=R7
                 	.DEF _dd=R6
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _slength=R10
                 	.DEF _slength_msb=R11
                 	.DEF _tempx=R12
                 	.DEF _tempx_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0164 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _font5x7:
000046 0705
000047 6020
000048 0000
000049 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00004a 0000
00004b 5f00
00004c 0000
00004d 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
00004e 0700
00004f 1400
000050 147f
000051 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000052 2a24
000053 2a7f
000054 2312
000055 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
000056 6264
000057 4936
000058 2255
000059 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00005a 0305
00005b 0000
00005c 1c00
00005d 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
00005e 0000
00005f 2241
000060 001c
000061 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000062 2a1c
000063 0808
000064 3e08
000065 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
000066 5000
000067 0030
000068 0800
000069 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00006a 0808
00006b 3000
00006c 0030
00006d 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
00006e 0810
00006f 0204
000070 513e
000071 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000072 003e
000073 7f42
000074 0040
000075 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
000076 4951
000077 2146
000078 4541
000079 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00007a 1418
00007b 7f12
00007c 2710
00007d 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
00007e 3945
00007f 4a3c
000080 4949
000081 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000082 0971
000083 0305
000084 4936
000085 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
000086 0636
000087 4949
000088 1e29
000089 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00008a 0036
00008b 0000
00008c 3656
00008d 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
00008e 0800
00008f 2214
000090 1441
000091 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000092 1414
000093 2241
000094 0814
000095 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
000096 5101
000097 0609
000098 4932
000099 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00009a 7e3e
00009b 1111
00009c 7e11
00009d 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
00009e 4949
00009f 3e36
0000a0 4141
0000a1 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
0000a2 417f
0000a3 2241
0000a4 7f1c
0000a5 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
0000a6 4149
0000a7 097f
0000a8 0109
0000a9 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
0000aa 4141
0000ab 3251
0000ac 087f
0000ad 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
0000ae 007f
0000af 7f41
0000b0 0041
0000b1 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
0000b2 3f41
0000b3 7f01
0000b4 1408
0000b5 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
0000b6 407f
0000b7 4040
0000b8 7f40
0000b9 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
0000ba 7f02
0000bb 047f
0000bc 1008
0000bd 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000be 4141
0000bf 3e41
0000c0 097f
0000c1 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000c2 3e06
0000c3 5141
0000c4 5e21
0000c5 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000c6 2919
0000c7 4646
0000c8 4949
0000c9 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ca 0101
0000cb 017f
0000cc 3f01
0000cd 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000ce 3f40
0000cf 201f
0000d0 2040
0000d1 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000d2 1820
0000d3 7f20
0000d4 1463
0000d5 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000d6 0363
0000d7 7804
0000d8 0304
0000d9 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000da 4549
0000db 0043
0000dc 7f00
0000dd 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000de 0402
0000df 1008
0000e0 4120
0000e1 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000e2 0000
0000e3 0204
0000e4 0201
0000e5 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000e6 4040
0000e7 4040
0000e8 0100
0000e9 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ea 2000
0000eb 5454
0000ec 7854
0000ed 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000ee 4444
0000ef 3838
0000f0 4444
0000f1 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000f2 4438
0000f3 4844
0000f4 387f
0000f5 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000f6 1854
0000f7 7e08
0000f8 0109
0000f9 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000fa 5414
0000fb 3c54
0000fc 087f
0000fd 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000fe 0078
0000ff 7d44
000100 0040
000101 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
000102 3d44
000103 0000
000104 107f
000105 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
000106 4100
000107 407f
000108 7c00
000109 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
00010a 7804
00010b 087c
00010c 0404
00010d 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
00010e 4444
00010f 3844
000110 147c
000111 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
000112 0808
000113 1414
000114 7c18
000115 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
000116 0404
000117 4808
000118 5454
000119 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
00011a 3f04
00011b 4044
00011c 3c20
00011d 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
00011e 7c20
00011f 201c
000120 2040
000121 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000122 3040
000123 3c40
000124 2844
000125 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
000126 0c44
000127 5050
000128 3c50
000129 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00012a 4c54
00012b 0044
00012c 3608
00012d 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
00012e 0000
00012f 007f
000130 0000
000131 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000132 0008
000133 0102
000134 0402
000135 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
000136 4141
000137 7f41      	.DB  0x41,0x41,0x41,0x7F
                 __glcd_mask:
000138 0100
000139 0703
00013a 1f0f
00013b 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1208): warning: .cseg .db misalignment - padding zero byte
00013c 00ff      	.DB  0xFF
                 _tbl10_G103:
00013d 2710
00013e 03e8
00013f 0064
000140 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000141 0001      	.DB  0x1,0x0
                 _tbl16_G103:
000142 1000
000143 0100
000144 0010
000145 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000146 0000
000147 0000      	.DB  0x0,0x0,0x0,0x0
000148 0000
000149 0000      	.DB  0x0,0x0,0x0,0x0
00014a 0000      	.DB  0x0,0x0
                 
                 _0x3:
00014b 0001
00014c 0002
00014d 0003
00014e 0004      	.DB  0x1,0x0,0x2,0x0,0x3,0x0,0x4,0x0
00014f 0005
000150 0006
000151 0007
000152 0008      	.DB  0x5,0x0,0x6,0x0,0x7,0x0,0x8,0x0
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1224): warning: .cseg .db misalignment - padding zero byte
000153 0009      	.DB  0x9
                 _0x2080060:
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1226): warning: .cseg .db misalignment - padding zero byte
000154 0001      	.DB  0x1
                 _0x2080000:
000155 4e2d
000156 4e41
000157 4900
000158 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Hoang PC\Desktop\htn\modau\Debug\List\bena.asm(1229): warning: .cseg .db misalignment - padding zero byte
000159 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00015a 000a      	.DW  0x0A
00015b 0004      	.DW  0x04
00015c 028c      	.DW  __REG_VARS*2
                 
00015d 0011      	.DW  0x11
00015e 051d      	.DW  _keypad
00015f 0296      	.DW  _0x3*2
                 
000160 0001      	.DW  0x01
000161 0a55      	.DW  __seed_G104
000162 02a8      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
000163 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000164 94f8      	CLI
000165 27ee      	CLR  R30
000166 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000167 e0f1      	LDI  R31,1
000168 bff5      	OUT  MCUCR,R31
000169 bfe5      	OUT  MCUCR,R30
00016a 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00016c e08d      	LDI  R24,(14-2)+1
00016d e0a2      	LDI  R26,2
00016e 27bb      	CLR  R27
                 __CLEAR_REG:
00016f 93ed      	ST   X+,R30
000170 958a      	DEC  R24
000171 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000172 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000173 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000174 e0a0      	LDI  R26,LOW(__SRAM_START)
000175 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000176 93ed      	ST   X+,R30
000177 9701      	SBIW R24,1
000178 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000179 ebe4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00017a e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00017b 9185      	LPM  R24,Z+
00017c 9195      	LPM  R25,Z+
00017d 9700      	SBIW R24,0
00017e f061      	BREQ __GLOBAL_INI_END
00017f 91a5      	LPM  R26,Z+
000180 91b5      	LPM  R27,Z+
000181 9005      	LPM  R0,Z+
000182 9015      	LPM  R1,Z+
000183 01bf      	MOVW R22,R30
000184 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000185 9005      	LPM  R0,Z+
000186 920d      	ST   X+,R0
000187 9701      	SBIW R24,1
000188 f7e1      	BRNE __GLOBAL_INI_LOOP
000189 01fb      	MOVW R30,R22
00018a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00018b bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00018c efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00018d bfed      	OUT  SPL,R30
00018e e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00018f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000190 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000191 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000192 940c 0381 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * bena.c
                 ; *
                 ; * Created: 10/2/2022 8:32:03 AM
                 ; * Author: Hoang
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <glcd.h>
                 ;#include <font5x7.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define LEFT 4
                 ;#define DOWN 5
                 ;#define RIGHT 6
                 ;#define UP 2
                 ;#define PAUSE false
                 ;#define BACKLIGHT A0
                 ;#define MAX_WIDTH 84
                 ;#define MAX_HEIGHT 48
                 ;#define speakerPin A5
                 ;
                 ;// global var
                 ;int keypad[3][3] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
                 
                 	.DSEG
                 ;bool dl = false, dr = false, du = false, dd = false;
                 ;int x[200], y[200], i, slength, tempx = 0, tempy = 0, xx, yy;
                 ;unsigned int  score, high;
                 ;int xegg , yegg;
                 ;
                 ;//setup begin
                 ;void setup() {
                 ; 0000 0022 void setup() {
                 
                 	.CSEG
                 _setup:
                 ; .FSTART _setup
                 ; 0000 0023     glcd_clear();
000194 940e 04d5 	CALL _glcd_clear
                 ; 0000 0024     slength = 30;
000196 e1ee      	LDI  R30,LOW(30)
000197 e0f0      	LDI  R31,HIGH(30)
000198 015f      	MOVW R10,R30
                 ; 0000 0025     score = 0;
000199 e0e0      	LDI  R30,LOW(0)
00019a 93e0 0855 	STS  _score,R30
00019c 93e0 0856 	STS  _score+1,R30
                 ; 0000 0026     xegg = MAX_WIDTH / 2;
00019e e2ea      	LDI  R30,LOW(42)
00019f e0f0      	LDI  R31,HIGH(42)
0001a0 93e0 0857 	STS  _xegg,R30
0001a2 93f0 0858 	STS  _xegg+1,R31
                 ; 0000 0027     yegg = MAX_HEIGHT / 2;
0001a4 e1e8      	LDI  R30,LOW(24)
0001a5 e0f0      	LDI  R31,HIGH(24)
0001a6 93e0 0859 	STS  _yegg,R30
0001a8 93f0 085a 	STS  _yegg+1,R31
                 ; 0000 0028     dr = true;
0001aa e0e1      	LDI  R30,LOW(1)
0001ab 2e4e      	MOV  R4,R30
                 ; 0000 0029     dl = false;
0001ac 2455      	CLR  R5
                 ; 0000 002A     du = false;
0001ad 2477      	CLR  R7
                 ; 0000 002B     dd = false;
0001ae 2466      	CLR  R6
                 ; 0000 002C     tempx = 0, tempy = 0;
0001af 24cc      	CLR  R12
0001b0 24dd      	CLR  R13
0001b1 e0e0      	LDI  R30,LOW(0)
0001b2 93e0 084f 	STS  _tempy,R30
0001b4 93e0 0850 	STS  _tempy+1,R30
                 ; 0000 002D     for (i = 0; i < slength; i++)
0001b6 2488      	CLR  R8
0001b7 2499      	CLR  R9
                 _0x5:
                +
0001b8 148a     +CP R8 , R10
0001b9 049b     +CPC R9 , R11
                 	__CPWRR 8,9,10,11
0001ba f494      	BRGE _0x6
                 ; 0000 002E     {
                 ; 0000 002F         x[i] = 10 + slength - i;
0001bb 940e 058b 	CALL SUBOPT_0x0
0001bd 01f5      	MOVW R30,R10
0001be 963a      	ADIW R30,10
0001bf 19e8      	SUB  R30,R8
0001c0 09f9      	SBC  R31,R9
0001c1 93ed      	ST   X+,R30
0001c2 93fc      	ST   X,R31
                 ; 0000 0030         y[i] = 10;
0001c3 940e 0593 	CALL SUBOPT_0x1
0001c5 e0ea      	LDI  R30,LOW(10)
0001c6 e0f0      	LDI  R31,HIGH(10)
0001c7 93ed      	ST   X+,R30
0001c8 93fc      	ST   X,R31
                 ; 0000 0031     }
0001c9 01f4      	MOVW R30,R8
0001ca 9631      	ADIW R30,1
0001cb 014f      	MOVW R8,R30
0001cc cfeb      	RJMP _0x5
                 _0x6:
                 ; 0000 0032 
                 ; 0000 0033     glcd_setpixel(xegg, yegg);
0001cd 940e 059b 	CALL SUBOPT_0x2
                 ; 0000 0034 
                 ; 0000 0035 
                 ; 0000 0036 }
0001cf 9508      	RET
                 ; .FEND
                 ;
                 ;//matrix button processing
                 ;int BUTTON() {
                 ; 0000 0039 int BUTTON() {
                 _BUTTON:
                 ; .FSTART _BUTTON
                 ; 0000 003A     int result = -1;
                 ; 0000 003B     char a;
                 ; 0000 003C     int i,j;
                 ; 0000 003D     for (j = 0; j < 3; j++) {  //Xet cot
0001d0 9722      	SBIW R28,2
0001d1 940e 064b 	CALL __SAVELOCR6
                 ;	result -> R16,R17
                 ;	a -> R19
                 ;	i -> R20,R21
                 ;	j -> Y+6
                +
0001d3 ef0f     +LDI R16 , LOW ( - 1 )
0001d4 ef1f     +LDI R17 , HIGH ( - 1 )
                 	__GETWRN 16,17,-1
0001d5 e0e0      	LDI  R30,LOW(0)
0001d6 83ee      	STD  Y+6,R30
0001d7 83ef      	STD  Y+6+1,R30
                 _0x8:
0001d8 81ae      	LDD  R26,Y+6
0001d9 81bf      	LDD  R27,Y+6+1
0001da 9713      	SBIW R26,3
0001db f00c      	BRLT PC+2
0001dc c046      	RJMP _0x9
                 ; 0000 003E         if (j == 0) PORTF = 0b11111101; //1111 1101,
0001dd 81ee      	LDD  R30,Y+6
0001de 81ff      	LDD  R31,Y+6+1
0001df 9730      	SBIW R30,0
0001e0 f419      	BRNE _0xA
0001e1 efed      	LDI  R30,LOW(253)
0001e2 93e0 0062 	STS  98,R30
                 ; 0000 003F         if (j == 1) PORTF = 0b11110111; //1111 0111,
                 _0xA:
0001e4 81ae      	LDD  R26,Y+6
0001e5 81bf      	LDD  R27,Y+6+1
0001e6 9711      	SBIW R26,1
0001e7 f419      	BRNE _0xB
0001e8 efe7      	LDI  R30,LOW(247)
0001e9 93e0 0062 	STS  98,R30
                 ; 0000 0040         if (j == 2) PORTF = 0b11011111; //1101 1111,
                 _0xB:
0001eb 81ae      	LDD  R26,Y+6
0001ec 81bf      	LDD  R27,Y+6+1
0001ed 9712      	SBIW R26,2
0001ee f419      	BRNE _0xC
0001ef edef      	LDI  R30,LOW(223)
0001f0 93e0 0062 	STS  98,R30
                 ; 0000 0041         for (i = 0; i < 3; i++) { // Xet hang
                 _0xC:
                +
0001f2 e040     +LDI R20 , LOW ( 0 )
0001f3 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0xE:
                +
0001f4 3043     +CPI R20 , LOW ( 3 )
0001f5 e0e0     +LDI R30 , HIGH ( 3 )
0001f6 075e     +CPC R21 , R30
                 	__CPWRN 20,21,3
0001f7 f52c      	BRGE _0xF
                 ; 0000 0042             if (i == 0) {
0001f8 2e04      	MOV  R0,R20
0001f9 2a05      	OR   R0,R21
0001fa f439      	BRNE _0x10
                 ; 0000 0043                 a = PINF&0x04;
0001fb b1e0      	IN   R30,0x0
0001fc 70e4      	ANDI R30,LOW(0x4)
0001fd 2f3e      	MOV  R19,R30
                 ; 0000 0044                 if (a != 0x04) {
0001fe 3034      	CPI  R19,4
0001ff f011      	BREQ _0x11
                 ; 0000 0045                    result = keypad[i][j];
000200 940e 05a2 	CALL SUBOPT_0x3
                 ; 0000 0046                 }
                 ; 0000 0047             }
                 _0x11:
                 ; 0000 0048             if (i == 1) {
                 _0x10:
000202 e0e1      	LDI  R30,LOW(1)
000203 e0f0      	LDI  R31,HIGH(1)
000204 17e4      	CP   R30,R20
000205 07f5      	CPC  R31,R21
000206 f439      	BRNE _0x12
                 ; 0000 0049                a = PINF&0x10;
000207 b1e0      	IN   R30,0x0
000208 71e0      	ANDI R30,LOW(0x10)
000209 2f3e      	MOV  R19,R30
                 ; 0000 004A                if (a != 0x10) {
00020a 3130      	CPI  R19,16
00020b f011      	BREQ _0x13
                 ; 0000 004B                   result = keypad[i][j];
00020c 940e 05a2 	CALL SUBOPT_0x3
                 ; 0000 004C                }
                 ; 0000 004D             }
                 _0x13:
                 ; 0000 004E 
                 ; 0000 004F             if (i == 2) {
                 _0x12:
00020e e0e2      	LDI  R30,LOW(2)
00020f e0f0      	LDI  R31,HIGH(2)
000210 17e4      	CP   R30,R20
000211 07f5      	CPC  R31,R21
000212 f439      	BRNE _0x14
                 ; 0000 0050                 a = PINF&0x01;
000213 b1e0      	IN   R30,0x0
000214 70e1      	ANDI R30,LOW(0x1)
000215 2f3e      	MOV  R19,R30
                 ; 0000 0051                 if (a != 0x01) {
000216 3031      	CPI  R19,1
000217 f011      	BREQ _0x15
                 ; 0000 0052                    result = keypad[i][j];
000218 940e 05a2 	CALL SUBOPT_0x3
                 ; 0000 0053                 }
                 ; 0000 0054             }
                 _0x15:
                 ; 0000 0055         }
                 _0x14:
                +
00021a 5f4f     +SUBI R20 , LOW ( - 1 )
00021b 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00021c cfd7      	RJMP _0xE
                 _0xF:
                 ; 0000 0056     }
00021d 81ee      	LDD  R30,Y+6
00021e 81ff      	LDD  R31,Y+6+1
00021f 9631      	ADIW R30,1
000220 83ee      	STD  Y+6,R30
000221 83ff      	STD  Y+6+1,R31
000222 cfb5      	RJMP _0x8
                 _0x9:
                 ; 0000 0057     return result;
000223 01f8      	MOVW R30,R16
000224 940e 0652 	CALL __LOADLOCR6
000226 9628      	ADIW R28,8
000227 9508      	RET
                 ; 0000 0058 }
                 ; .FEND
                 ;
                 ;
                 ;//
                 ;void check_egg() {
                 ; 0000 005C void check_egg() {
                 _check_egg:
                 ; .FSTART _check_egg
                 ; 0000 005D      if (x[0] == xegg && y[0] == yegg){
000228 91e0 0857 	LDS  R30,_xegg
00022a 91f0 0858 	LDS  R31,_xegg+1
00022c 91a0 052f 	LDS  R26,_x
00022e 91b0 0530 	LDS  R27,_x+1
000230 17ea      	CP   R30,R26
000231 07fb      	CPC  R31,R27
000232 f459      	BRNE _0x17
000233 91e0 0859 	LDS  R30,_yegg
000235 91f0 085a 	LDS  R31,_yegg+1
000237 91a0 06bf 	LDS  R26,_y
000239 91b0 06c0 	LDS  R27,_y+1
00023b 17ea      	CP   R30,R26
00023c 07fb      	CPC  R31,R27
00023d f009      	BREQ _0x18
                 _0x17:
00023e c02b      	RJMP _0x16
                 _0x18:
                 ; 0000 005E         score += 1;
00023f 91e0 0855 	LDS  R30,_score
000241 91f0 0856 	LDS  R31,_score+1
000243 9631      	ADIW R30,1
000244 93e0 0855 	STS  _score,R30
000246 93f0 0856 	STS  _score+1,R31
                 ; 0000 005F         slength += 3;
000248 01f5      	MOVW R30,R10
000249 9633      	ADIW R30,3
00024a 015f      	MOVW R10,R30
                 ; 0000 0060         glcd_clrpixel(tempx, tempy);
00024b 92ca      	ST   -Y,R12
00024c 91a0 084f 	LDS  R26,_tempy
00024e 940e 0548 	CALL _glcd_clrpixel
                 ; 0000 0061         xegg = rand() % 85 + 1;
000250 940e 055e 	CALL _rand
000252 01df      	MOVW R26,R30
000253 e5e5      	LDI  R30,LOW(85)
000254 e0f0      	LDI  R31,HIGH(85)
000255 940e 0635 	CALL __MODW21
000257 9631      	ADIW R30,1
000258 93e0 0857 	STS  _xegg,R30
00025a 93f0 0858 	STS  _xegg+1,R31
                 ; 0000 0062         yegg = rand() % 47 + 1;
00025c 940e 055e 	CALL _rand
00025e 01df      	MOVW R26,R30
00025f e2ef      	LDI  R30,LOW(47)
000260 e0f0      	LDI  R31,HIGH(47)
000261 940e 0635 	CALL __MODW21
000263 9631      	ADIW R30,1
000264 93e0 0859 	STS  _yegg,R30
000266 93f0 085a 	STS  _yegg+1,R31
                 ; 0000 0063         glcd_setpixel(xegg, yegg);
000268 940e 059b 	CALL SUBOPT_0x2
                 ; 0000 0064      }
                 ; 0000 0065 }
                 _0x16:
00026a 9508      	RET
                 ; .FEND
                 ;
                 ;//
                 ;void draw_snake()
                 ; 0000 0069 {
                 _draw_snake:
                 ; .FSTART _draw_snake
                 ; 0000 006A    for (i = 0; i < slength; i++) {
00026b 2488      	CLR  R8
00026c 2499      	CLR  R9
                 _0x1A:
                +
00026d 148a     +CP R8 , R10
00026e 049b     +CPC R9 , R11
                 	__CPWRR 8,9,10,11
00026f f484      	BRGE _0x1B
                 ; 0000 006B       glcd_setpixel(x[i], y[i]);
000270 940e 058b 	CALL SUBOPT_0x0
000272 91ec      	LD   R30,X
000273 93ea      	ST   -Y,R30
000274 940e 0593 	CALL SUBOPT_0x1
000276 91ac      	LD   R26,X
000277 d2c7      	RCALL _glcd_setpixel
                 ; 0000 006C       glcd_clrpixel(tempx, tempy);
000278 92ca      	ST   -Y,R12
000279 91a0 084f 	LDS  R26,_tempy
00027b d2cc      	RCALL _glcd_clrpixel
                 ; 0000 006D    }
00027c 01f4      	MOVW R30,R8
00027d 9631      	ADIW R30,1
00027e 014f      	MOVW R8,R30
00027f cfed      	RJMP _0x1A
                 _0x1B:
                 ; 0000 006E }
000280 9508      	RET
                 ; .FEND
                 ;
                 ;//
                 ;void move_snake() {
                 ; 0000 0071 void move_snake() {
                 _move_snake:
                 ; .FSTART _move_snake
                 ; 0000 0072     if (!PAUSE) {
                 ; 0000 0073         bool isEnd = false;
                 ; 0000 0074         delay_ms(75);
000281 9721      	SBIW R28,1
000282 e0e0      	LDI  R30,LOW(0)
000283 83e8      	ST   Y,R30
                 ;	isEnd -> Y+0
000284 e4ab      	LDI  R26,LOW(75)
000285 e0b0      	LDI  R27,0
000286 940e 05ec 	CALL _delay_ms
                 ; 0000 0075         // auto move
                 ; 0000 0076         if (dr == true) {
000288 e0e1      	LDI  R30,LOW(1)
000289 15e4      	CP   R30,R4
00028a f421      	BRNE _0x1D
                 ; 0000 0077             tempx = x[0] + 1;
00028b 940e 05b3 	CALL SUBOPT_0x4
00028d 940e 05b8 	CALL SUBOPT_0x5
                 ; 0000 0078             tempy = y[0];
                 ; 0000 0079         }
                 ; 0000 007A         if (dl == true){
                 _0x1D:
00028f e0e1      	LDI  R30,LOW(1)
000290 15e5      	CP   R30,R5
000291 f411      	BRNE _0x1E
                 ; 0000 007B             tempx = x[0] - 1;
000292 940e 05c3 	CALL SUBOPT_0x6
                 ; 0000 007C             tempy = y[0];
                 ; 0000 007D         }
                 ; 0000 007E         if (du == true){
                 _0x1E:
000294 e0e1      	LDI  R30,LOW(1)
000295 15e7      	CP   R30,R7
000296 f429      	BRNE _0x1F
                 ; 0000 007F             tempx = x[0];
000297 940e 05cf 	CALL SUBOPT_0x7
                 ; 0000 0080             tempy = y[0] - 1;
000299 9731      	SBIW R30,1
00029a 940e 05d8 	CALL SUBOPT_0x8
                 ; 0000 0081         }
                 ; 0000 0082         if (dd == true){
                 _0x1F:
00029c e0e1      	LDI  R30,LOW(1)
00029d 15e6      	CP   R30,R6
00029e f429      	BRNE _0x20
                 ; 0000 0083             tempx = x[0];
00029f 940e 05cf 	CALL SUBOPT_0x7
                 ; 0000 0084             tempy = y[0] + 1;
0002a1 9631      	ADIW R30,1
0002a2 940e 05d8 	CALL SUBOPT_0x8
                 ; 0000 0085         }
                 ; 0000 0086 
                 ; 0000 0087 
                 ; 0000 0088         for (i = 1; i < slength; i++) {
                 _0x20:
0002a4 e0e1      	LDI  R30,LOW(1)
0002a5 e0f0      	LDI  R31,HIGH(1)
0002a6 014f      	MOVW R8,R30
                 _0x22:
                +
0002a7 148a     +CP R8 , R10
0002a8 049b     +CPC R9 , R11
                 	__CPWRR 8,9,10,11
0002a9 f514      	BRGE _0x23
                 ; 0000 0089             if (x[i] == x[0] && y[i] == y[0]) {
0002aa 940e 058b 	CALL SUBOPT_0x0
0002ac 940e 0643 	CALL __GETW1P
0002ae 01df      	MOVW R26,R30
0002af 940e 05b3 	CALL SUBOPT_0x4
0002b1 17ea      	CP   R30,R26
0002b2 07fb      	CPC  R31,R27
0002b3 f461      	BRNE _0x25
0002b4 940e 0593 	CALL SUBOPT_0x1
0002b6 940e 0643 	CALL __GETW1P
0002b8 01df      	MOVW R26,R30
0002b9 91e0 06bf 	LDS  R30,_y
0002bb 91f0 06c0 	LDS  R31,_y+1
0002bd 17ea      	CP   R30,R26
0002be 07fb      	CPC  R31,R27
0002bf f009      	BREQ _0x26
                 _0x25:
0002c0 c007      	RJMP _0x24
                 _0x26:
                 ; 0000 008A                 delay_ms(500);
0002c1 efa4      	LDI  R26,LOW(500)
0002c2 e0b1      	LDI  R27,HIGH(500)
0002c3 940e 05ec 	CALL _delay_ms
                 ; 0000 008B                 isEnd = true;
0002c5 e0e1      	LDI  R30,LOW(1)
0002c6 83e8      	ST   Y,R30
                 ; 0000 008C                 setup();
0002c7 decc      	RCALL _setup
                 ; 0000 008D             }
                 ; 0000 008E         }
                 _0x24:
0002c8 01f4      	MOVW R30,R8
0002c9 9631      	ADIW R30,1
0002ca 014f      	MOVW R8,R30
0002cb cfdb      	RJMP _0x22
                 _0x23:
                 ; 0000 008F         check_egg();
0002cc df5b      	RCALL _check_egg
                 ; 0000 0090 
                 ; 0000 0091         //
                 ; 0000 0092         if (tempx <= 0)
0002cd 2400      	CLR  R0
0002ce 140c      	CP   R0,R12
0002cf 040d      	CPC  R0,R13
0002d0 f024      	BRLT _0x27
                 ; 0000 0093         {
                 ; 0000 0094             tempx = 84 + tempx;
0002d1 01f6      	MOVW R30,R12
0002d2 5aec      	SUBI R30,LOW(-84)
0002d3 4fff      	SBCI R31,HIGH(-84)
0002d4 016f      	MOVW R12,R30
                 ; 0000 0095         }
                 ; 0000 0096         if (tempx >= 84)
                 _0x27:
0002d5 e5e4      	LDI  R30,LOW(84)
0002d6 e0f0      	LDI  R31,HIGH(84)
0002d7 16ce      	CP   R12,R30
0002d8 06df      	CPC  R13,R31
0002d9 f014      	BRLT _0x28
                 ; 0000 0097         {
                 ; 0000 0098             tempx = tempx - 84;
                +
0002da 1ace     +SUB R12 , R30
0002db 0adf     +SBC R13 , R31
                 	__SUBWRR 12,13,30,31
                 ; 0000 0099         }
                 ; 0000 009A         if (tempy <= 0)
                 _0x28:
0002dc 940e 05dd 	CALL SUBOPT_0x9
0002de 940e 0647 	CALL __CPW02
0002e0 f03c      	BRLT _0x29
                 ; 0000 009B         {
                 ; 0000 009C             tempy = 48 + tempy;
0002e1 91e0 084f 	LDS  R30,_tempy
0002e3 91f0 0850 	LDS  R31,_tempy+1
0002e5 96f0      	ADIW R30,48
0002e6 940e 05d8 	CALL SUBOPT_0x8
                 ; 0000 009D         }
                 ; 0000 009E         if (tempy >= 48)
                 _0x29:
0002e8 940e 05dd 	CALL SUBOPT_0x9
0002ea 97d0      	SBIW R26,48
0002eb f03c      	BRLT _0x2A
                 ; 0000 009F         {
                 ; 0000 00A0             tempy = tempy - 48;
0002ec 91e0 084f 	LDS  R30,_tempy
0002ee 91f0 0850 	LDS  R31,_tempy+1
0002f0 97f0      	SBIW R30,48
0002f1 940e 05d8 	CALL SUBOPT_0x8
                 ; 0000 00A1         }
                 ; 0000 00A2 
                 ; 0000 00A3         if (!isEnd) {
                 _0x2A:
0002f3 81e8      	LD   R30,Y
0002f4 30e0      	CPI  R30,0
0002f5 f5b9      	BRNE _0x2B
                 ; 0000 00A4             for (i = 0; i < slength; i++)
0002f6 2488      	CLR  R8
0002f7 2499      	CLR  R9
                 _0x2D:
                +
0002f8 148a     +CP R8 , R10
0002f9 049b     +CPC R9 , R11
                 	__CPWRR 8,9,10,11
0002fa f594      	BRGE _0x2E
                 ; 0000 00A5                 {
                 ; 0000 00A6                     xx = x[i];
0002fb 940e 058b 	CALL SUBOPT_0x0
0002fd 940e 0643 	CALL __GETW1P
0002ff 93e0 0851 	STS  _xx,R30
000301 93f0 0852 	STS  _xx+1,R31
                 ; 0000 00A7                     yy = y[i];
000303 940e 0593 	CALL SUBOPT_0x1
000305 940e 0643 	CALL __GETW1P
000307 93e0 0853 	STS  _yy,R30
000309 93f0 0854 	STS  _yy+1,R31
                 ; 0000 00A8                     x[i] = tempx;
00030b 01f4      	MOVW R30,R8
00030c e2af      	LDI  R26,LOW(_x)
00030d e0b5      	LDI  R27,HIGH(_x)
00030e 0fee      	LSL  R30
00030f 1fff      	ROL  R31
000310 0fea      	ADD  R30,R26
000311 1ffb      	ADC  R31,R27
000312 82c0      	ST   Z,R12
000313 82d1      	STD  Z+1,R13
                 ; 0000 00A9                     y[i] = tempy;
000314 01f4      	MOVW R30,R8
000315 ebaf      	LDI  R26,LOW(_y)
000316 e0b6      	LDI  R27,HIGH(_y)
000317 0fee      	LSL  R30
000318 1fff      	ROL  R31
000319 0fea      	ADD  R30,R26
00031a 1ffb      	ADC  R31,R27
00031b 940e 05dd 	CALL SUBOPT_0x9
00031d 83a0      	STD  Z+0,R26
00031e 83b1      	STD  Z+1,R27
                 ; 0000 00AA                     tempx = xx;
                +
00031f 90c0 0851+LDS R12 , 0 + ( _xx )
000321 90d0 0852+LDS R13 , 0 + ( _xx ) + 1
                 	__GETWRMN 12,13,0,_xx
                 ; 0000 00AB                     tempy = yy;
000323 91e0 0853 	LDS  R30,_yy
000325 91f0 0854 	LDS  R31,_yy+1
000327 940e 05d8 	CALL SUBOPT_0x8
                 ; 0000 00AC                 }
000329 01f4      	MOVW R30,R8
00032a 9631      	ADIW R30,1
00032b 014f      	MOVW R8,R30
00032c cfcb      	RJMP _0x2D
                 _0x2E:
                 ; 0000 00AD         }
                 ; 0000 00AE 
                 ; 0000 00AF 
                 ; 0000 00B0         draw_snake();
                 _0x2B:
00032d df3d      	RCALL _draw_snake
                 ; 0000 00B1 
                 ; 0000 00B2     }
00032e 9621      	ADIW R28,1
                 ; 0000 00B3 }
00032f 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;//
                 ;void direct(int phim) {
                 ; 0000 00B8 void direct(int phim) {
                 _direct:
                 ; .FSTART _direct
                 ; 0000 00B9     if (phim == DOWN && (dr == true || dl == true))
000330 940e 05e2 	CALL SUBOPT_0xA
                 ;	phim -> Y+0
000332 9715      	SBIW R26,5
000333 f431      	BRNE _0x30
000334 e0e1      	LDI  R30,LOW(1)
000335 15e4      	CP   R30,R4
000336 f011      	BREQ _0x31
000337 15e5      	CP   R30,R5
000338 f409      	BRNE _0x30
                 _0x31:
000339 c001      	RJMP _0x33
                 _0x30:
00033a c00a      	RJMP _0x2F
                 _0x33:
                 ; 0000 00BA     {
                 ; 0000 00BB         dr = false;
00033b 2444      	CLR  R4
                 ; 0000 00BC         dl = false;
00033c 2455      	CLR  R5
                 ; 0000 00BD         du = false;
00033d 2477      	CLR  R7
                 ; 0000 00BE         dd = true;
00033e e0e1      	LDI  R30,LOW(1)
00033f 2e6e      	MOV  R6,R30
                 ; 0000 00BF         tempx = x[0]; //Save the new coordinates of head in tempx,tempy
000340 940e 05cf 	CALL SUBOPT_0x7
                 ; 0000 00C0         tempy = y[0] + 1;
000342 9631      	ADIW R30,1
000343 940e 05d8 	CALL SUBOPT_0x8
                 ; 0000 00C1     }
                 ; 0000 00C2     if (phim == UP && (dr == true || dl == true)) {
                 _0x2F:
000345 81a8      	LD   R26,Y
000346 81b9      	LDD  R27,Y+1
000347 9712      	SBIW R26,2
000348 f431      	BRNE _0x35
000349 e0e1      	LDI  R30,LOW(1)
00034a 15e4      	CP   R30,R4
00034b f011      	BREQ _0x36
00034c 15e5      	CP   R30,R5
00034d f409      	BRNE _0x35
                 _0x36:
00034e c001      	RJMP _0x38
                 _0x35:
00034f c00a      	RJMP _0x34
                 _0x38:
                 ; 0000 00C3         dr = false;
000350 2444      	CLR  R4
                 ; 0000 00C4         dl = false;
000351 2455      	CLR  R5
                 ; 0000 00C5         du = true;
000352 e0e1      	LDI  R30,LOW(1)
000353 2e7e      	MOV  R7,R30
                 ; 0000 00C6         dd = false;
000354 2466      	CLR  R6
                 ; 0000 00C7         tempx = x[0]; //Save the new coordinates of head in tempx,tempy
000355 940e 05cf 	CALL SUBOPT_0x7
                 ; 0000 00C8         tempy = y[0] - 1;
000357 9731      	SBIW R30,1
000358 940e 05d8 	CALL SUBOPT_0x8
                 ; 0000 00C9     }
                 ; 0000 00CA     if (phim == LEFT && (dd == true || du == true)) {
                 _0x34:
00035a 81a8      	LD   R26,Y
00035b 81b9      	LDD  R27,Y+1
00035c 9714      	SBIW R26,4
00035d f431      	BRNE _0x3A
00035e e0e1      	LDI  R30,LOW(1)
00035f 15e6      	CP   R30,R6
000360 f011      	BREQ _0x3B
000361 15e7      	CP   R30,R7
000362 f409      	BRNE _0x3A
                 _0x3B:
000363 c001      	RJMP _0x3D
                 _0x3A:
000364 c007      	RJMP _0x39
                 _0x3D:
                 ; 0000 00CB         dr = false;
000365 2444      	CLR  R4
                 ; 0000 00CC         dl = true;
000366 e0e1      	LDI  R30,LOW(1)
000367 2e5e      	MOV  R5,R30
                 ; 0000 00CD         du = false;
000368 2477      	CLR  R7
                 ; 0000 00CE         dd = false;
000369 2466      	CLR  R6
                 ; 0000 00CF         tempx = x[0]-1; //Save the new coordinates of head in tempx,tempy
00036a 940e 05c3 	CALL SUBOPT_0x6
                 ; 0000 00D0         tempy = y[0];
                 ; 0000 00D1     }
                 ; 0000 00D2     if (phim == RIGHT && (dd == true || du == true))
                 _0x39:
00036c 81a8      	LD   R26,Y
00036d 81b9      	LDD  R27,Y+1
00036e 9716      	SBIW R26,6
00036f f431      	BRNE _0x3F
000370 e0e1      	LDI  R30,LOW(1)
000371 15e6      	CP   R30,R6
000372 f011      	BREQ _0x40
000373 15e7      	CP   R30,R7
000374 f409      	BRNE _0x3F
                 _0x40:
000375 c001      	RJMP _0x42
                 _0x3F:
000376 c009      	RJMP _0x3E
                 _0x42:
                 ; 0000 00D3     {
                 ; 0000 00D4         dr = true;
000377 e0e1      	LDI  R30,LOW(1)
000378 2e4e      	MOV  R4,R30
                 ; 0000 00D5         dl = false;
000379 2455      	CLR  R5
                 ; 0000 00D6         du = false;
00037a 2477      	CLR  R7
                 ; 0000 00D7         dd = false;
00037b 2466      	CLR  R6
                 ; 0000 00D8         tempx = x[0] + 1; //Save the new coordinates of head in tempx,tempy
00037c 940e 05b3 	CALL SUBOPT_0x4
00037e 940e 05b8 	CALL SUBOPT_0x5
                 ; 0000 00D9         tempy = y[0];
                 ; 0000 00DA     }
                 ; 0000 00DB }
                 _0x3E:
000380 c1db      	RJMP _0x2120002
                 ; .FEND
                 ;//main
                 ;void main(void)
                 ; 0000 00DE {
                 _main:
                 ; .FSTART _main
                 ; 0000 00DF GLCDINIT_t glcd_init_data;
                 ; 0000 00E0 glcd_init_data.font = font5x7;
000381 9728      	SBIW R28,8
                 ;	glcd_init_data -> Y+0
000382 e8ec      	LDI  R30,LOW(_font5x7*2)
000383 e0f0      	LDI  R31,HIGH(_font5x7*2)
000384 83e8      	ST   Y,R30
000385 83f9      	STD  Y+1,R31
                 ; 0000 00E1 glcd_init_data.readxmem=NULL;
000386 e0e0      	LDI  R30,LOW(0)
000387 83ea      	STD  Y+2,R30
000388 83eb      	STD  Y+2+1,R30
                 ; 0000 00E2 glcd_init_data.writexmem=NULL;
000389 83ec      	STD  Y+4,R30
00038a 83ed      	STD  Y+4+1,R30
                 ; 0000 00E3 glcd_init_data.temp_coef=160;
00038b 81ee      	LDD  R30,Y+6
00038c 7fec      	ANDI R30,LOW(0xFC)
00038d 83ee      	STD  Y+6,R30
                 ; 0000 00E4 glcd_init_data.bias=6;
00038e 7ee3      	ANDI R30,LOW(0xE3)
00038f 61e8      	ORI  R30,LOW(0x18)
000390 83ee      	STD  Y+6,R30
                 ; 0000 00E5 glcd_init_data.vlcd=46;
000391 81ef      	LDD  R30,Y+7
000392 78e0      	ANDI R30,LOW(0x80)
000393 62ee      	ORI  R30,LOW(0x2E)
000394 83ef      	STD  Y+7,R30
                 ; 0000 00E6 glcd_init(&glcd_init_data);
000395 01de      	MOVW R26,R28
000396 d096      	RCALL _glcd_init
                 ; 0000 00E7 
                 ; 0000 00E8 DDRD = 0xFF;
000397 efef      	LDI  R30,LOW(255)
000398 bbe1      	OUT  0x11,R30
                 ; 0000 00E9 PORTD = 0xB6;
000399 ebe6      	LDI  R30,LOW(182)
00039a bbe2      	OUT  0x12,R30
                 ; 0000 00EA DDRF = 0b11101010;
00039b eeea      	LDI  R30,LOW(234)
00039c 93e0 0061 	STS  97,R30
                 ; 0000 00EB PORTF = 0b00010101;
00039e e1e5      	LDI  R30,LOW(21)
00039f 93e0 0062 	STS  98,R30
                 ; 0000 00EC 
                 ; 0000 00ED setup();
0003a1 ddf2      	RCALL _setup
                 ; 0000 00EE while (1)
                 _0x43:
                 ; 0000 00EF     {
                 ; 0000 00F0         // Please write your application code here
                 ; 0000 00F1         int phim = BUTTON();
                 ; 0000 00F2         direct(phim);
0003a2 9722      	SBIW R28,2
                 ;	glcd_init_data -> Y+2
                 ;	phim -> Y+0
0003a3 de2c      	RCALL _BUTTON
0003a4 83e8      	ST   Y,R30
0003a5 83f9      	STD  Y+1,R31
0003a6 81a8      	LD   R26,Y
0003a7 81b9      	LDD  R27,Y+1
0003a8 df87      	RCALL _direct
                 ; 0000 00F3         move_snake();
0003a9 ded7      	RCALL _move_snake
                 ; 0000 00F4     }
0003aa 9622      	ADIW R28,2
0003ab cff6      	RJMP _0x43
                 ; 0000 00F5 }
                 _0x46:
0003ac cfff      	RJMP _0x46
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _pcd8544_delay_G100:
                 ; .FSTART _pcd8544_delay_G100
0003ad 9508      	RET
                 ; .FEND
                 _pcd8544_wrbus_G100:
                 ; .FSTART _pcd8544_wrbus_G100
0003ae 93aa      	ST   -Y,R26
0003af 931a      	ST   -Y,R17
0003b0 91e0 0065 	LDS  R30,101
0003b2 7eef      	ANDI R30,0xEF
0003b3 93e0 0065 	STS  101,R30
0003b5 e018      	LDI  R17,LOW(8)
                 _0x2000004:
0003b6 dff6      	RCALL _pcd8544_delay_G100
0003b7 81e9      	LDD  R30,Y+1
0003b8 78e0      	ANDI R30,LOW(0x80)
0003b9 f021      	BREQ _0x2000006
0003ba 91e0 0065 	LDS  R30,101
0003bc 60e2      	ORI  R30,2
0003bd c003      	RJMP _0x20000A0
                 _0x2000006:
0003be 91e0 0065 	LDS  R30,101
0003c0 7fed      	ANDI R30,0xFD
                 _0x20000A0:
0003c1 93e0 0065 	STS  101,R30
0003c3 81e9      	LDD  R30,Y+1
0003c4 0fee      	LSL  R30
0003c5 83e9      	STD  Y+1,R30
0003c6 dfe6      	RCALL _pcd8544_delay_G100
0003c7 91e0 0065 	LDS  R30,101
0003c9 60e4      	ORI  R30,4
0003ca 93e0 0065 	STS  101,R30
0003cc dfe0      	RCALL _pcd8544_delay_G100
0003cd 91e0 0065 	LDS  R30,101
0003cf 7feb      	ANDI R30,0xFB
0003d0 93e0 0065 	STS  101,R30
0003d2 5011      	SUBI R17,LOW(1)
0003d3 f711      	BRNE _0x2000004
0003d4 91e0 0065 	LDS  R30,101
0003d6 61e0      	ORI  R30,0x10
0003d7 93e0 0065 	STS  101,R30
0003d9 8118      	LDD  R17,Y+0
0003da c181      	RJMP _0x2120002
                 ; .FEND
                 _pcd8544_wrcmd:
                 ; .FSTART _pcd8544_wrcmd
0003db 93aa      	ST   -Y,R26
0003dc 91e0 0065 	LDS  R30,101
0003de 7fee      	ANDI R30,0xFE
0003df 93e0 0065 	STS  101,R30
0003e1 81a8      	LD   R26,Y
0003e2 dfcb      	RCALL _pcd8544_wrbus_G100
0003e3 c0ef      	RJMP _0x2120003
                 ; .FEND
                 _pcd8544_wrdata_G100:
                 ; .FSTART _pcd8544_wrdata_G100
0003e4 93aa      	ST   -Y,R26
0003e5 91e0 0065 	LDS  R30,101
0003e7 60e1      	ORI  R30,1
0003e8 93e0 0065 	STS  101,R30
0003ea 81a8      	LD   R26,Y
0003eb dfc2      	RCALL _pcd8544_wrbus_G100
0003ec c0e6      	RJMP _0x2120003
                 ; .FEND
                 _pcd8544_setaddr_G100:
                 ; .FSTART _pcd8544_setaddr_G100
0003ed 93aa      	ST   -Y,R26
0003ee 931a      	ST   -Y,R17
0003ef 81e9      	LDD  R30,Y+1
0003f0 95e6      	LSR  R30
0003f1 95e6      	LSR  R30
0003f2 95e6      	LSR  R30
0003f3 2f1e      	MOV  R17,R30
0003f4 e5e4      	LDI  R30,LOW(84)
0003f5 9fe1      	MUL  R30,R17
0003f6 01f0      	MOVW R30,R0
0003f7 01df      	MOVW R26,R30
0003f8 81ea      	LDD  R30,Y+2
0003f9 e0f0      	LDI  R31,0
0003fa 0fea      	ADD  R30,R26
0003fb 1ffb      	ADC  R31,R27
0003fc 93e0 085b 	STS  _gfx_addr_G100,R30
0003fe 93f0 085c 	STS  _gfx_addr_G100+1,R31
000400 2fe1      	MOV  R30,R17
000401 8118      	LDD  R17,Y+0
000402 9623      	ADIW R28,3
000403 9508      	RET
                 ; .FEND
                 _pcd8544_gotoxy:
                 ; .FSTART _pcd8544_gotoxy
000404 93aa      	ST   -Y,R26
000405 81e9      	LDD  R30,Y+1
000406 68e0      	ORI  R30,0x80
000407 2fae      	MOV  R26,R30
000408 dfd2      	RCALL _pcd8544_wrcmd
000409 81e9      	LDD  R30,Y+1
00040a 93ea      	ST   -Y,R30
00040b 81a9      	LDD  R26,Y+1
00040c dfe0      	RCALL _pcd8544_setaddr_G100
00040d 64e0      	ORI  R30,0x40
00040e 2fae      	MOV  R26,R30
00040f dfcb      	RCALL _pcd8544_wrcmd
000410 c14b      	RJMP _0x2120002
                 ; .FEND
                 _pcd8544_rdbyte:
                 ; .FSTART _pcd8544_rdbyte
000411 93aa      	ST   -Y,R26
000412 81e9      	LDD  R30,Y+1
000413 93ea      	ST   -Y,R30
000414 81a9      	LDD  R26,Y+1
000415 dfee      	RCALL _pcd8544_gotoxy
000416 91e0 085b 	LDS  R30,_gfx_addr_G100
000418 91f0 085c 	LDS  R31,_gfx_addr_G100+1
00041a 5ae3      	SUBI R30,LOW(-_gfx_buffer_G100)
00041b 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G100)
00041c 81e0      	LD   R30,Z
00041d c13e      	RJMP _0x2120002
                 ; .FEND
                 _pcd8544_wrbyte:
                 ; .FSTART _pcd8544_wrbyte
00041e 93aa      	ST   -Y,R26
00041f e5ab      	LDI  R26,LOW(_gfx_addr_G100)
000420 e0b8      	LDI  R27,HIGH(_gfx_addr_G100)
000421 91ed      	LD   R30,X+
000422 91fd      	LD   R31,X+
000423 9631      	ADIW R30,1
000424 93fe      	ST   -X,R31
000425 93ee      	ST   -X,R30
000426 9731      	SBIW R30,1
000427 5ae3      	SUBI R30,LOW(-_gfx_buffer_G100)
000428 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G100)
000429 81a8      	LD   R26,Y
00042a 83a0      	STD  Z+0,R26
00042b dfb8      	RCALL _pcd8544_wrdata_G100
00042c c0a6      	RJMP _0x2120003
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
00042d 93ba      	ST   -Y,R27
00042e 93aa      	ST   -Y,R26
00042f 940e 064d 	CALL __SAVELOCR4
000431 91e0 0064 	LDS  R30,100
000433 61e0      	ORI  R30,0x10
000434 940e 05e7 	CALL SUBOPT_0xB
000436 61e0      	ORI  R30,0x10
000437 93e0 0065 	STS  101,R30
000439 91e0 0064 	LDS  R30,100
00043b 60e4      	ORI  R30,4
00043c 940e 05e7 	CALL SUBOPT_0xB
00043e 7feb      	ANDI R30,0xFB
00043f 93e0 0065 	STS  101,R30
000441 91e0 0064 	LDS  R30,100
000443 60e2      	ORI  R30,2
000444 93e0 0064 	STS  100,R30
000446 91e0 0064 	LDS  R30,100
000448 60e1      	ORI  R30,1
000449 93e0 0064 	STS  100,R30
00044b 91e0 0064 	LDS  R30,100
00044d 60e8      	ORI  R30,8
00044e 940e 05e7 	CALL SUBOPT_0xB
000450 7fe7      	ANDI R30,0XF7
000451 93e0 0065 	STS  101,R30
000453 e0aa      	LDI  R26,LOW(10)
000454 e0b0      	LDI  R27,0
000455 940e 05ec 	CALL _delay_ms
000457 91e0 0065 	LDS  R30,101
000459 60e8      	ORI  R30,8
00045a 93e0 0065 	STS  101,R30
00045c 81ec      	LDD  R30,Y+4
00045d 81fd      	LDD  R31,Y+4+1
00045e 9730      	SBIW R30,0
00045f f121      	BREQ _0x2000008
000460 81e6      	LDD  R30,Z+6
000461 70e3      	ANDI R30,LOW(0x3)
000462 2f1e      	MOV  R17,R30
000463 81ec      	LDD  R30,Y+4
000464 81fd      	LDD  R31,Y+4+1
000465 81e6      	LDD  R30,Z+6
000466 95e6      	LSR  R30
000467 95e6      	LSR  R30
000468 70e7      	ANDI R30,LOW(0x7)
000469 2f0e      	MOV  R16,R30
00046a 81ec      	LDD  R30,Y+4
00046b 81fd      	LDD  R31,Y+4+1
00046c 81e7      	LDD  R30,Z+7
00046d 77ef      	ANDI R30,0x7F
00046e 2f3e      	MOV  R19,R30
00046f 81ac      	LDD  R26,Y+4
000470 81bd      	LDD  R27,Y+4+1
000471 940e 0643 	CALL __GETW1P
                +
000473 93e0 0504+STS _glcd_state + ( 4 ) , R30
000475 93f0 0505+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
000477 9612      	ADIW R26,2
000478 940e 0643 	CALL __GETW1P
                +
00047a 93e0 0519+STS _glcd_state + ( 25 ) , R30
00047c 93f0 051a+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
00047e 81ac      	LDD  R26,Y+4
00047f 81bd      	LDD  R27,Y+4+1
000480 9614      	ADIW R26,4
000481 940e 0643 	CALL __GETW1P
000483 c00d      	RJMP _0x20000A1
                 _0x2000008:
000484 e010      	LDI  R17,LOW(0)
000485 e003      	LDI  R16,LOW(3)
000486 e332      	LDI  R19,LOW(50)
000487 e0e0      	LDI  R30,LOW(0)
000488 e0f0      	LDI  R31,HIGH(0)
                +
000489 93e0 0504+STS _glcd_state + ( 4 ) , R30
00048b 93f0 0505+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
00048d 93e0 0519+STS _glcd_state + ( 25 ) , R30
00048f 93f0 051a+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20000A1:
                +
000491 93e0 051b+STS _glcd_state + ( 27 ) , R30
000493 93f0 051c+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
000495 e2a1      	LDI  R26,LOW(33)
000496 df44      	RCALL _pcd8544_wrcmd
000497 2fe1      	MOV  R30,R17
000498 60e4      	ORI  R30,4
000499 2fae      	MOV  R26,R30
00049a df40      	RCALL _pcd8544_wrcmd
00049b 2fe0      	MOV  R30,R16
00049c 61e0      	ORI  R30,0x10
00049d 2fae      	MOV  R26,R30
00049e df3c      	RCALL _pcd8544_wrcmd
00049f 2fe3      	MOV  R30,R19
0004a0 68e0      	ORI  R30,0x80
0004a1 2fae      	MOV  R26,R30
0004a2 df38      	RCALL _pcd8544_wrcmd
0004a3 e2a0      	LDI  R26,LOW(32)
0004a4 df36      	RCALL _pcd8544_wrcmd
0004a5 e0a1      	LDI  R26,LOW(1)
0004a6 d023      	RCALL _glcd_display
0004a7 e0e1      	LDI  R30,LOW(1)
0004a8 93e0 0500 	STS  _glcd_state,R30
0004aa e0e0      	LDI  R30,LOW(0)
                +
0004ab 93e0 0501+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
0004ad e0e1      	LDI  R30,LOW(1)
                +
0004ae 93e0 0506+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
0004b0 93e0 0507+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
                +
0004b2 93e0 0508+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
0004b4 efef      	LDI  R30,LOW(255)
                +
0004b5 93e0 0509+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
0004b7 e0e1      	LDI  R30,LOW(1)
                +
0004b8 93e0 0510+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
0004ba e1e1     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
0004bb e0f5     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
0004bc 93fa      	ST   -Y,R31
0004bd 93ea      	ST   -Y,R30
0004be efef      	LDI  R30,LOW(255)
0004bf 93ea      	ST   -Y,R30
0004c0 e0a8      	LDI  R26,LOW(8)
0004c1 e0b0      	LDI  R27,0
0004c2 940e 057b 	CALL _memset
0004c4 d010      	RCALL _glcd_clear
0004c5 e0e1      	LDI  R30,LOW(1)
0004c6 940e 0654 	CALL __LOADLOCR4
0004c8 9626      	ADIW R28,6
0004c9 9508      	RET
                 ; .FEND
                 _glcd_display:
                 ; .FSTART _glcd_display
0004ca 93aa      	ST   -Y,R26
0004cb 81e8      	LD   R30,Y
0004cc 30e0      	CPI  R30,0
0004cd f011      	BREQ _0x200000A
0004ce e0ec      	LDI  R30,LOW(12)
0004cf c001      	RJMP _0x200000B
                 _0x200000A:
0004d0 e0e8      	LDI  R30,LOW(8)
                 _0x200000B:
0004d1 2fae      	MOV  R26,R30
0004d2 df08      	RCALL _pcd8544_wrcmd
                 _0x2120003:
0004d3 9621      	ADIW R28,1
0004d4 9508      	RET
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
0004d5 940e 064d 	CALL __SAVELOCR4
0004d7 e030      	LDI  R19,0
                +
0004d8 91e0 0501+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
0004da 30e0      	CPI  R30,0
0004db f009      	BREQ _0x200000D
0004dc ef3f      	LDI  R19,LOW(255)
                 _0x200000D:
0004dd e0e0      	LDI  R30,LOW(0)
0004de 93ea      	ST   -Y,R30
0004df e0a0      	LDI  R26,LOW(0)
0004e0 df23      	RCALL _pcd8544_gotoxy
                +
0004e1 ef08     +LDI R16 , LOW ( 504 )
0004e2 e011     +LDI R17 , HIGH ( 504 )
                 	__GETWRN 16,17,504
                 _0x200000E:
0004e3 01f8      	MOVW R30,R16
                +
0004e4 5001     +SUBI R16 , LOW ( 1 )
0004e5 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0004e6 9730      	SBIW R30,0
0004e7 f019      	BREQ _0x2000010
0004e8 2fa3      	MOV  R26,R19
0004e9 df34      	RCALL _pcd8544_wrbyte
0004ea cff8      	RJMP _0x200000E
                 _0x2000010:
0004eb e0e0      	LDI  R30,LOW(0)
0004ec 93ea      	ST   -Y,R30
0004ed e0a0      	LDI  R26,LOW(0)
0004ee d062      	RCALL _glcd_moveto
0004ef 940e 0654 	CALL __LOADLOCR4
0004f1 9624      	ADIW R28,4
0004f2 9508      	RET
                 ; .FEND
                 _glcd_putpixel:
                 ; .FSTART _glcd_putpixel
0004f3 93aa      	ST   -Y,R26
0004f4 931a      	ST   -Y,R17
0004f5 930a      	ST   -Y,R16
0004f6 81ac      	LDD  R26,Y+4
0004f7 35a4      	CPI  R26,LOW(0x54)
0004f8 f418      	BRSH _0x2000012
0004f9 81ab      	LDD  R26,Y+3
0004fa 33a0      	CPI  R26,LOW(0x30)
0004fb f020      	BRLO _0x2000011
                 _0x2000012:
0004fc 8119      	LDD  R17,Y+1
0004fd 8108      	LDD  R16,Y+0
0004fe 940c 0589 	JMP  _0x2120001
                 _0x2000011:
000500 81ec      	LDD  R30,Y+4
000501 93ea      	ST   -Y,R30
000502 81ac      	LDD  R26,Y+4
000503 df0d      	RCALL _pcd8544_rdbyte
000504 2f1e      	MOV  R17,R30
000505 81eb      	LDD  R30,Y+3
000506 70e7      	ANDI R30,LOW(0x7)
000507 e0a1      	LDI  R26,LOW(1)
000508 940e 05fa 	CALL __LSLB12
00050a 2f0e      	MOV  R16,R30
00050b 81ea      	LDD  R30,Y+2
00050c 30e0      	CPI  R30,0
00050d f011      	BREQ _0x2000014
00050e 2b10      	OR   R17,R16
00050f c003      	RJMP _0x2000015
                 _0x2000014:
000510 2fe0      	MOV  R30,R16
000511 95e0      	COM  R30
000512 231e      	AND  R17,R30
                 _0x2000015:
000513 2fa1      	MOV  R26,R17
000514 df09      	RCALL _pcd8544_wrbyte
000515 8119      	LDD  R17,Y+1
000516 8108      	LDD  R16,Y+0
000517 940c 0589 	JMP  _0x2120001
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
000519 940e 05e2 	CALL SUBOPT_0xA
00051b 940e 0647 	CALL __CPW02
00051d f01c      	BRLT _0x2020003
00051e e0e0      	LDI  R30,LOW(0)
00051f e0f0      	LDI  R31,HIGH(0)
000520 c03b      	RJMP _0x2120002
                 _0x2020003:
000521 81a8      	LD   R26,Y
000522 81b9      	LDD  R27,Y+1
000523 35a4      	CPI  R26,LOW(0x54)
000524 e0e0      	LDI  R30,HIGH(0x54)
000525 07be      	CPC  R27,R30
000526 f01c      	BRLT _0x2020004
000527 e5e3      	LDI  R30,LOW(83)
000528 e0f0      	LDI  R31,HIGH(83)
000529 c032      	RJMP _0x2120002
                 _0x2020004:
00052a 81e8      	LD   R30,Y
00052b 81f9      	LDD  R31,Y+1
00052c c02f      	RJMP _0x2120002
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
00052d 940e 05e2 	CALL SUBOPT_0xA
00052f 940e 0647 	CALL __CPW02
000531 f01c      	BRLT _0x2020005
000532 e0e0      	LDI  R30,LOW(0)
000533 e0f0      	LDI  R31,HIGH(0)
000534 c027      	RJMP _0x2120002
                 _0x2020005:
000535 81a8      	LD   R26,Y
000536 81b9      	LDD  R27,Y+1
000537 97d0      	SBIW R26,48
000538 f01c      	BRLT _0x2020006
000539 e2ef      	LDI  R30,LOW(47)
00053a e0f0      	LDI  R31,HIGH(47)
00053b c020      	RJMP _0x2120002
                 _0x2020006:
00053c 81e8      	LD   R30,Y
00053d 81f9      	LDD  R31,Y+1
00053e c01d      	RJMP _0x2120002
                 ; .FEND
                 _glcd_setpixel:
                 ; .FSTART _glcd_setpixel
00053f 93aa      	ST   -Y,R26
000540 81e9      	LDD  R30,Y+1
000541 93ea      	ST   -Y,R30
000542 81e9      	LDD  R30,Y+1
000543 93ea      	ST   -Y,R30
000544 91a0 0500 	LDS  R26,_glcd_state
000546 dfac      	RCALL _glcd_putpixel
000547 c014      	RJMP _0x2120002
                 ; .FEND
                 _glcd_clrpixel:
                 ; .FSTART _glcd_clrpixel
000548 93aa      	ST   -Y,R26
000549 81e9      	LDD  R30,Y+1
00054a 93ea      	ST   -Y,R30
00054b 81e9      	LDD  R30,Y+1
00054c 93ea      	ST   -Y,R30
                +
00054d 91a0 0501+LDS R26 , _glcd_state + ( 1 )
                 	__GETB2MN _glcd_state,1
00054f dfa3      	RCALL _glcd_putpixel
000550 c00b      	RJMP _0x2120002
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
000551 93aa      	ST   -Y,R26
000552 81a9      	LDD  R26,Y+1
000553 27bb      	CLR  R27
000554 dfc4      	RCALL _glcd_clipx
                +
000555 93e0 0502+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000557 81a8      	LD   R26,Y
000558 27bb      	CLR  R27
000559 dfd3      	RCALL _glcd_clipy
                +
00055a 93e0 0503+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
                 _0x2120002:
00055c 9622      	ADIW R28,2
00055d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _rand:
                 ; .FSTART _rand
00055e 91e0 0a55 	LDS  R30,__seed_G104
000560 91f0 0a56 	LDS  R31,__seed_G104+1
000562 9160 0a57 	LDS  R22,__seed_G104+2
000564 9170 0a58 	LDS  R23,__seed_G104+3
                +
000566 e6ad     +LDI R26 , LOW ( 0x41C64E6D )
000567 e4be     +LDI R27 , HIGH ( 0x41C64E6D )
000568 ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
000569 e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
00056a 940e 0602 	CALL __MULD12U
                +
00056c 59ee     +SUBI R30 , LOW ( - 30562 )
00056d 48f8     +SBCI R31 , HIGH ( - 30562 )
00056e 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
00056f 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
000570 93e0 0a55 	STS  __seed_G104,R30
000572 93f0 0a56 	STS  __seed_G104+1,R31
000574 9360 0a57 	STS  __seed_G104+2,R22
000576 9370 0a58 	STS  __seed_G104+3,R23
000578 01fb      	movw r30,r22
000579 77ff      	andi r31,0x7F
00057a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
00057b 93ba      	ST   -Y,R27
00057c 93aa      	ST   -Y,R26
00057d 81b9          ldd  r27,y+1
00057e 81a8          ld   r26,y
00057f 9610          adiw r26,0
000580 f031          breq memset1
000581 81fc          ldd  r31,y+4
000582 81eb          ldd  r30,y+3
000583 816a          ldd  r22,y+2
                 memset0:
000584 9361          st   z+,r22
000585 9711          sbiw r26,1
000586 f7e9          brne memset0
                 memset1:
000587 81eb          ldd  r30,y+3
000588 81fc          ldd  r31,y+4
                 _0x2120001:
000589 9625      	ADIW R28,5
00058a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _glcd_state:
000500           	.BYTE 0x1D
                 _keypad:
00051d           	.BYTE 0x12
                 _x:
00052f           	.BYTE 0x190
                 _y:
0006bf           	.BYTE 0x190
                 _tempy:
00084f           	.BYTE 0x2
                 _xx:
000851           	.BYTE 0x2
                 _yy:
000853           	.BYTE 0x2
                 _score:
000855           	.BYTE 0x2
                 _xegg:
000857           	.BYTE 0x2
                 _yegg:
000859           	.BYTE 0x2
                 _gfx_addr_G100:
00085b           	.BYTE 0x2
                 _gfx_buffer_G100:
00085d           	.BYTE 0x1F8
                 __seed_G104:
000a55           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
00058b 01f4      	MOVW R30,R8
00058c e2af      	LDI  R26,LOW(_x)
00058d e0b5      	LDI  R27,HIGH(_x)
00058e 0fee      	LSL  R30
00058f 1fff      	ROL  R31
000590 0fae      	ADD  R26,R30
000591 1fbf      	ADC  R27,R31
000592 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1:
000593 01f4      	MOVW R30,R8
000594 ebaf      	LDI  R26,LOW(_y)
000595 e0b6      	LDI  R27,HIGH(_y)
000596 0fee      	LSL  R30
000597 1fff      	ROL  R31
000598 0fae      	ADD  R26,R30
000599 1fbf      	ADC  R27,R31
00059a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00059b 91e0 0857 	LDS  R30,_xegg
00059d 93ea      	ST   -Y,R30
00059e 91a0 0859 	LDS  R26,_yegg
0005a0 940c 053f 	JMP  _glcd_setpixel
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3:
                +
0005a2 e0a6     +LDI R26 , 6
0005a3 9fa4     +MUL R26 , R20
0005a4 01f0     +MOVW R30 , R0
0005a5 9fa5     +MUL R26 , R21
0005a6 0df0     +ADD R31 , R0
                 	__MULBNWRU 20,21,6
0005a7 5ee3      	SUBI R30,LOW(-_keypad)
0005a8 4ffa      	SBCI R31,HIGH(-_keypad)
0005a9 01df      	MOVW R26,R30
0005aa 81ee      	LDD  R30,Y+6
0005ab 81ff      	LDD  R31,Y+6+1
0005ac 0fee      	LSL  R30
0005ad 1fff      	ROL  R31
0005ae 0fae      	ADD  R26,R30
0005af 1fbf      	ADC  R27,R31
0005b0 910d      	LD   R16,X+
0005b1 911c      	LD   R17,X
0005b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0005b3 91e0 052f 	LDS  R30,_x
0005b5 91f0 0530 	LDS  R31,_x+1
0005b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
0005b8 9631      	ADIW R30,1
0005b9 016f      	MOVW R12,R30
0005ba 91e0 06bf 	LDS  R30,_y
0005bc 91f0 06c0 	LDS  R31,_y+1
0005be 93e0 084f 	STS  _tempy,R30
0005c0 93f0 0850 	STS  _tempy+1,R31
0005c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0005c3 dfef      	RCALL SUBOPT_0x4
0005c4 9731      	SBIW R30,1
0005c5 016f      	MOVW R12,R30
0005c6 91e0 06bf 	LDS  R30,_y
0005c8 91f0 06c0 	LDS  R31,_y+1
0005ca 93e0 084f 	STS  _tempy,R30
0005cc 93f0 0850 	STS  _tempy+1,R31
0005ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x7:
                +
0005cf 90c0 052f+LDS R12 , 0 + ( _x )
0005d1 90d0 0530+LDS R13 , 0 + ( _x ) + 1
                 	__GETWRMN 12,13,0,_x
0005d3 91e0 06bf 	LDS  R30,_y
0005d5 91f0 06c0 	LDS  R31,_y+1
0005d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
0005d8 93e0 084f 	STS  _tempy,R30
0005da 93f0 0850 	STS  _tempy+1,R31
0005dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0005dd 91a0 084f 	LDS  R26,_tempy
0005df 91b0 0850 	LDS  R27,_tempy+1
0005e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0005e2 93ba      	ST   -Y,R27
0005e3 93aa      	ST   -Y,R26
0005e4 81a8      	LD   R26,Y
0005e5 81b9      	LDD  R27,Y+1
0005e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0005e7 93e0 0064 	STS  100,R30
0005e9 91e0 0065 	LDS  R30,101
0005eb 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005ec 9610      	adiw r26,0
0005ed f039      	breq __delay_ms1
                 __delay_ms0:
                +
0005ee ed80     +LDI R24 , LOW ( 0x7D0 )
0005ef e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005f0 9701     +SBIW R24 , 1
0005f1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005f2 95a8      	wdr
0005f3 9711      	sbiw r26,1
0005f4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005f5 9508      	ret
                 
                 __ANEGW1:
0005f6 95f1      	NEG  R31
0005f7 95e1      	NEG  R30
0005f8 40f0      	SBCI R31,0
0005f9 9508      	RET
                 
                 __LSLB12:
0005fa 23ee      	TST  R30
0005fb 2e0e      	MOV  R0,R30
0005fc 2fea      	MOV  R30,R26
0005fd f019      	BREQ __LSLB12R
                 __LSLB12L:
0005fe 0fee      	LSL  R30
0005ff 940a      	DEC  R0
000600 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000601 9508      	RET
                 
                 __MULD12U:
000602 9f7a      	MUL  R23,R26
000603 2d70      	MOV  R23,R0
000604 9f6b      	MUL  R22,R27
000605 0d70      	ADD  R23,R0
000606 9ff8      	MUL  R31,R24
000607 0d70      	ADD  R23,R0
000608 9fe9      	MUL  R30,R25
000609 0d70      	ADD  R23,R0
00060a 9f6a      	MUL  R22,R26
00060b 2d60      	MOV  R22,R0
00060c 0d71      	ADD  R23,R1
00060d 9ffb      	MUL  R31,R27
00060e 0d60      	ADD  R22,R0
00060f 1d71      	ADC  R23,R1
000610 9fe8      	MUL  R30,R24
000611 0d60      	ADD  R22,R0
000612 1d71      	ADC  R23,R1
000613 2788      	CLR  R24
000614 9ffa      	MUL  R31,R26
000615 2df0      	MOV  R31,R0
000616 0d61      	ADD  R22,R1
000617 1f78      	ADC  R23,R24
000618 9feb      	MUL  R30,R27
000619 0df0      	ADD  R31,R0
00061a 1d61      	ADC  R22,R1
00061b 1f78      	ADC  R23,R24
00061c 9fea      	MUL  R30,R26
00061d 2de0      	MOV  R30,R0
00061e 0df1      	ADD  R31,R1
00061f 1f68      	ADC  R22,R24
000620 1f78      	ADC  R23,R24
000621 9508      	RET
                 
                 __DIVW21U:
000622 2400      	CLR  R0
000623 2411      	CLR  R1
000624 e190      	LDI  R25,16
                 __DIVW21U1:
000625 0faa      	LSL  R26
000626 1fbb      	ROL  R27
000627 1c00      	ROL  R0
000628 1c11      	ROL  R1
000629 1a0e      	SUB  R0,R30
00062a 0a1f      	SBC  R1,R31
00062b f418      	BRCC __DIVW21U2
00062c 0e0e      	ADD  R0,R30
00062d 1e1f      	ADC  R1,R31
00062e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00062f 60a1      	SBR  R26,1
                 __DIVW21U3:
000630 959a      	DEC  R25
000631 f799      	BRNE __DIVW21U1
000632 01fd      	MOVW R30,R26
000633 01d0      	MOVW R26,R0
000634 9508      	RET
                 
                 __MODW21:
000635 94e8      	CLT
000636 ffb7      	SBRS R27,7
000637 c004      	RJMP __MODW211
000638 95a0      	COM  R26
000639 95b0      	COM  R27
00063a 9611      	ADIW R26,1
00063b 9468      	SET
                 __MODW211:
00063c fdf7      	SBRC R31,7
00063d dfb8      	RCALL __ANEGW1
00063e dfe3      	RCALL __DIVW21U
00063f 01fd      	MOVW R30,R26
000640 f40e      	BRTC __MODW212
000641 dfb4      	RCALL __ANEGW1
                 __MODW212:
000642 9508      	RET
                 
                 __GETW1P:
000643 91ed      	LD   R30,X+
000644 91fc      	LD   R31,X
000645 9711      	SBIW R26,1
000646 9508      	RET
                 
                 __CPW02:
000647 2400      	CLR  R0
000648 160a      	CP   R0,R26
000649 060b      	CPC  R0,R27
00064a 9508      	RET
                 
                 __SAVELOCR6:
00064b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00064c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00064d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00064e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00064f 931a      	ST   -Y,R17
000650 930a      	ST   -Y,R16
000651 9508      	RET
                 
                 __LOADLOCR6:
000652 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000653 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000654 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000655 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000656 8119      	LDD  R17,Y+1
000657 8108      	LD   R16,Y
000658 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  32 r1 :  11 r2 :   0 r3 :   0 r4 :   8 r5 :   8 r6 :   8 r7 :   8 
r8 :  21 r9 :   8 r10:   8 r11:   4 r12:  13 r13:   7 r14:   0 r15:   0 
r16:  17 r17:  25 r18:   2 r19:  14 r20:   9 r21:   9 r22:  16 r23:  14 
r24:  18 r25:   7 r26: 128 r27:  53 r28:  15 r29:   1 r30: 402 r31: 108 
x  :  17 y  : 149 z  :  17 
Registers used: 31 out of 35 (88.6%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  14 add   :  17 
adiw  :  29 and   :   1 andi  :  18 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  19 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   9 brmi  :   0 brne  :  30 brpl  :   0 brsh  :   1 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  68 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  32 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   3 
cp    :  25 cpc   :  15 cpi   :  11 cpse  :   0 dec   :   3 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   3 inc   :   0 jmp   :  39 ld    :  26 ldd   :  73 
ldi   : 132 lds   :  60 lpm   :   7 lsl   :   8 lsr   :   5 mov   :  34 
movw  :  39 mul   :  13 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   2 ori   :  18 out   :   8 pop   :   0 push  :   0 rcall :  41 
ret   :  34 reti  :   0 rjmp  :  42 rol   :   8 ror   :   0 sbc   :   3 
sbci  :  10 sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  28 sbr   :   1 
sbrc  :   1 sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  59 std   :  18 sts   :  69 sub   :   3 subi  :   8 
swap  :   0 tst   :   1 wdr   :   1 
Instructions used: 56 out of 117 (47.9%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000cb2   2678    572   3250  131072   2.5%
[.dseg] 0x000100 0x000a59      0   1369   1369    4096  33.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 14 warnings
